# -*- coding:utf-8 -*-

# standard library
from __future__ import print_function
import argparse

# third party (local)
from cort.core import corpora
from cort.analysis import error_extractors
from cort.analysis import spanning_tree_algorithms

def read_corpus(gold_path, infer_path, ant_path=None):
    """
        Read corpus from argparse.

        Args:
            gold_path: gold file path
            infer_path: inference file path
            ant_path: Optional, antecedents file path
        Returns:
            gold: gold corpus
            infer: inference corpus
    """
    gold = corpora.Corpus.from_file("gold", open(gold_path))
    infer = corpora.Corpus.from_file("infer", open(infer_path))
    if ant_path:
        print("Found antcedents file")
        infer.read_antecedents(open(ant_path))

    return gold, infer

def gen_errors(gold, infer):
    """
        Generate errors using extractor.

        Args:
            gold: gold corpus, generated by cort.core
            infer: infer corpus, generated by cort.core
        Returns:
            errors: errors, generated by extractor
    """
    extractor = error_extractors.ErrorExtractor(
                    gold,
                    spanning_tree_algorithms.recall_accessibility,
                    spanning_tree_algorithms.precision_system_output
                    )

    extractor.add_system(infer)
    errors = extractor.get_errors()

    return errors

def visualize(errors):
    """
        Visualize errors.

        Args:
            error: errors, generated by extractor
        Returns:
            None
    """

    errors.visualize("infer")
    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-gold', dest='gold_path', help='gold file path')
    parser.add_argument('-infer', dest='infer_path', help='infer file path')
    parser.add_argument('-ant', dest='ant_path', help='antecedents file path')
    options = parser.parse_args()

    if options.gold_path is None:
        print("gold path must be given.")
        exit(1)
    if options.infer_path is None:
        print("infer path must be given.")
        exit(1)

    gold, infer = read_corpus(options.gold_path, options.infer_path, options.ant_path)
    errors = gen_errors(gold, infer)
    visualize(errors)

